from multiprocessing import Pool
from msa.util.exploit_checker import check_exploit


class CliHandler:
    target_emails: list[str]
    silent: bool
    processes: int
    output_path: str | None

    def __init__(self, emails: list[str], silent: bool, processes: int, output_path: str | None):
        self.emails = emails
        self.silent = silent
        self.processes = processes
        self.output_path = output_path

    def run(self) -> int:
        print(f'Checking {len(self.emails)} emails!')

        with Pool(self.processes) as pool:
            escape_character = '\n'

            email_results = list(
                map(lambda x: f"{x['email'].replace(escape_character, '')} - Active: {'N/A' if x['active'] is None else str(x['active'])}"
                              f" - {'' if x['devices'] == -1 else str(x['devices']) + ' Active Device(s)'}",
                    pool.map(check_exploit, [email for email in self.emails]))
            )

            if self.output_path is None and not self.silent:
                [print(result) for result in email_results]
            else:
                output_stream = open(str(self.output_path if self.output_path is not None else 'out.txt'), 'w')
                output_stream.writelines(list(map(lambda x: x + '\n', email_results)))

        return 0


def handle_args(argv: list[str]) -> int:
    properties = {}

    last_valid_arg = None

    for arg in argv:
        if last_valid_arg is not None:
            properties[last_valid_arg] = arg
            last_valid_arg = None
            continue

        if arg.startswith('--'):
            properties[arg] = None
        elif arg.startswith('-'):
            last_valid_arg = arg
        else:
            print(f'Invalid argument {arg} found!')

            return -1

    emails = []

    if '-path' in properties:
        input_stream = open(properties['-path'], 'r')

        emails = input_stream.readlines()
    elif '-target' in properties:
        emails.append(properties['-target'])

    return CliHandler(emails, '--silent' in properties,
                      int(properties['-processes']) if '-processes' in properties else 4,
                      properties['-output'] if '-output' in properties else None).run()
